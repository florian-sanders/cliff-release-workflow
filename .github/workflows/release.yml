name: Release

on:
  pull_request:
    types: [closed]
    branches: [main]

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_release_pr:
    runs-on: ubuntu-latest
    outputs:
      is_release_pr: ${{ steps.check.outputs.is_release_pr }}
      merge_commit_sha: ${{ steps.check.outputs.merge_commit_sha }}
    steps:
      - name: Check if this is a merged release PR
        id: check
        run: |
          if [[ "${{ github.event.pull_request.merged }}" == "true" && "${{ github.event.pull_request.head.ref }}" == "prepare-next-release" ]]; then
            echo "is_release_pr=true" >> $GITHUB_OUTPUT
            echo "merge_commit_sha=${{ github.event.pull_request.merge_commit_sha }}" >> $GITHUB_OUTPUT
          else
            echo "is_release_pr=false" >> $GITHUB_OUTPUT
            echo "merge_commit_sha=" >> $GITHUB_OUTPUT
          fi

  do_release:
    needs: [check_release_pr]
    if: |
      (github.event_name == 'pull_request' && needs.check_release_pr.outputs.is_release_pr == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Checkout merge commit (PR merged)
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin main
          git checkout ${{ needs.check_release_pr.outputs.merge_commit_sha }}

      # - name: Use tag commit (tag push)
      #   if: github.event_name == 'push'
      #   run: |
      #     git fetch --tags
      #     git checkout ${{ github.ref_name }}

      - name: Get new version and changelog (PR merged)
        if: github.event_name == 'pull_request'
        id: cliff_pr
        uses: orhun/git-cliff-action@v4
        with:
          args: --unreleased --bump
        env:
          GITHUB_REPO: ${{ github.repository }}

      # - name: Use tag as version and changelog (tag push)
      #   if: github.event_name == 'push'
      #   id: cliff_tag
      #   run: |
      #     echo "version=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
      #     echo "content=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT

      - name: Bump cargo & extension version
        run: |
          sed -i 's/^version = "[0-9]\+\.[0-9]\+\.[0-9]\+"/version = "${{ steps.cliff_pr.outputs.version }}"/' Cargo.toml
          sed -i 's/^version = "[0-9]\+\.[0-9]\+\.[0-9]\+"/version = "${{ steps.cliff_pr.outputs.version }}"/' extension.toml

      - name: Create or update GitHub Release (and tag)
        env:
          GH_TOKEN: ${{ secrets.GIT_CLIFF_RELEASE_WORKFLOW_SECRET }}
        run: |
          TAG="${{ steps.cliff_pr.outputs.version }}"
          # Check if tag exists
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG exists, force-updating to latest commit."
            git tag -f "$TAG"
            git push origin "$TAG" --force
          else
            git tag "$TAG"
            git push origin "$TAG"
          fi

          # Try to create the release, or update if it already exists
          gh release create "$TAG" \
            --title "$TAG" \
            --notes "${{ steps.cliff_pr.outputs.content }}" \
            --latest --target "$GITHUB_SHA" || \
          gh release edit "$TAG" \
            --title "$TAG" \
            --notes "${{ steps.cliff_pr.outputs.content }}" \
            --latest --target "$GITHUB_SHA"
